module Java where

import Prelude;

data JavaType :: sort 0 where {
    -- Primitive types that we support.
    BooleanType :: JavaType;
    ByteType :: JavaType;
    CharType :: JavaType;
    ShortType :: JavaType;
    IntType :: JavaType;
    LongType :: JavaType;
    FloatType  :: JavaType;
    DoubleType :: JavaType;
    -- Type for arrays.
    ArrayType :: (n :: Nat) -> JavaType -> JavaType;
    -- Type for class instances.
    ClassType :: String -> JavaType;
  }

mkBooleanType :: JavaType;
mkBooleanType = BooleanType;

mkByteType :: JavaType;
mkByteType = ByteType;

mkCharType :: JavaType;
mkCharType = CharType;

mkShortType :: JavaType;
mkShortType = ShortType;

mkIntType :: JavaType;
mkIntType = IntType;

mkLongType :: JavaType;
mkLongType = LongType;

mkFloatType :: JavaType;
mkFloatType = FloatType;

mkDoubleType :: JavaType;
mkDoubleType = DoubleType;

mkArrayType :: (n :: Nat) -> JavaType -> JavaType;
mkArrayType n t = ArrayType n t;

mkClassType :: String -> JavaType;
mkClassType c = ClassType c;

boolExtend :: Bool -> bitvector 32;
boolExtend b = bvUExt 31 1 (single Bool b);

byteExtend :: bitvector 8 -> bitvector 32;
byteExtend x = bvSExt 24 7 x;

charExtend :: bitvector 16 -> bitvector 32;
charExtend x = bvUExt 16 16 x;

shortExtend :: bitvector 16 -> bitvector 32;
shortExtend x = bvSExt 16 15 x;

longExtend :: bitvector 32 -> bitvector 64;
longExtend x = bvUExt 32 32 x;

extendBoolArray :: (n :: Nat) -> Vec n Bool -> Vec n (bitvector 32);
extendBoolArray = map Bool (bitvector 32) boolExtend;

extendByteArray :: (n :: Nat) -> Vec n (bitvector 8) -> Vec n (bitvector 32);
extendByteArray = map (bitvector 8) (bitvector 32) byteExtend;

extendCharArray :: (n :: Nat) -> Vec n (bitvector 16) -> Vec n (bitvector 32);
extendCharArray = map (bitvector 16) (bitvector 32) charExtend;

extendShortArray :: (n :: Nat) -> Vec n (bitvector 16) -> Vec n (bitvector 32);
extendShortArray = map (bitvector 16) (bitvector 32) shortExtend;

boolTrunc :: bitvector 32 -> Bool;
boolTrunc = lsb 31;

byteTrunc :: bitvector 32 -> bitvector 8;
byteTrunc x = bvTrunc 24 8 x;

charTrunc :: bitvector 32 -> bitvector 16;
charTrunc x = bvTrunc 16 16 x;

shortTrunc :: bitvector 32 -> bitvector 16;
shortTrunc x = bvTrunc 16 16 x;