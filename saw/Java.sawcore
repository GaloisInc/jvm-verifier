module Java where

import Prelude;

data JavaType : sort 0 where {
    -- Primitive types that we support.
    BooleanType : JavaType;
    ByteType : JavaType;
    CharType : JavaType;
    ShortType : JavaType;
    IntType : JavaType;
    LongType : JavaType;
    FloatType  : JavaType;
    DoubleType : JavaType;
    -- Type for arrays.
    ArrayType : (n : Nat) -> JavaType -> JavaType;
    -- Type for class instances.
    ClassType : String -> JavaType;
  }

mkBooleanType : JavaType;
mkBooleanType = BooleanType;

mkByteType : JavaType;
mkByteType = ByteType;

mkCharType : JavaType;
mkCharType = CharType;

mkShortType : JavaType;
mkShortType = ShortType;

mkIntType : JavaType;
mkIntType = IntType;

mkLongType : JavaType;
mkLongType = LongType;

mkFloatType : JavaType;
mkFloatType = FloatType;

mkDoubleType : JavaType;
mkDoubleType = DoubleType;

mkArrayType : (n : Nat) -> JavaType -> JavaType;
mkArrayType n t = ArrayType n t;

mkClassType : String -> JavaType;
mkClassType c = ClassType c;

boolExtend' : Vec 1 Bool -> Vec 32 Bool;
boolExtend' b = bvUExt 31 1 b;

boolExtend : Bool -> Vec 32 Bool;
boolExtend b = boolExtend' (single Bool b);

byteExtend : Vec 8 Bool -> Vec 32 Bool;
byteExtend x = bvSExt 24 7 x;

charExtend : Vec 16 Bool -> Vec 32 Bool;
charExtend x = bvUExt 16 16 x;

shortExtend : Vec 16 Bool -> Vec 32 Bool;
shortExtend x = bvSExt 16 15 x;

longExtend : Vec 32 Bool -> Vec 64 Bool;
longExtend x = bvUExt 32 32 x;

extendBoolArray : (n : Nat) -> Vec n Bool -> Vec n (Vec 32 Bool);
extendBoolArray = map Bool (Vec 32 Bool) boolExtend;

extendByteArray : (n : Nat) -> Vec n (Vec 8 Bool) -> Vec n (Vec 32 Bool);
extendByteArray = map (Vec 8 Bool) (Vec 32 Bool) byteExtend;

extendCharArray : (n : Nat) -> Vec n (Vec 16 Bool) -> Vec n (Vec 32 Bool);
extendCharArray = map (Vec 16 Bool) (Vec 32 Bool) charExtend;

extendShortArray : (n : Nat) -> Vec n (Vec 16 Bool) -> Vec n (Vec 32 Bool);
extendShortArray = map (Vec 16 Bool) (Vec 32 Bool) shortExtend;

boolTrunc : Vec 32 Bool -> Bool;
boolTrunc = lsb 31;

byteTrunc : Vec 32 Bool -> Vec 8 Bool;
byteTrunc x = bvTrunc 24 8 x;

charTrunc : Vec 32 Bool -> Vec 16 Bool;
charTrunc x = bvTrunc 16 16 x;

shortTrunc : Vec 32 Bool -> Vec 16 Bool;
shortTrunc x = bvTrunc 16 16 x;

truncBoolArray : (n : Nat) -> Vec n (Vec 32 Bool) -> Vec n Bool;
truncBoolArray = map (Vec 32 Bool) Bool boolTrunc;

truncByteArray : (n : Nat) -> Vec n (Vec 32 Bool) -> Vec n (Vec 8 Bool);
truncByteArray = map (Vec 32 Bool) (Vec 8 Bool) byteTrunc;

truncCharArray : (n : Nat) -> Vec n (Vec 32 Bool) -> Vec n (Vec 16 Bool);
truncCharArray = map (Vec 32 Bool) (Vec 16 Bool) charTrunc;

truncShortArray : (n : Nat) -> Vec n (Vec 32 Bool) -> Vec n (Vec 16 Bool);
truncShortArray = map (Vec 32 Bool) (Vec 16 Bool) shortTrunc;
