module Java where

import Prelude;

data JavaType :: sort 0 where {
    -- Primitive types that we support.
    BooleanType :: JavaType;
    ByteType :: JavaType;
    CharType :: JavaType;
    ShortType :: JavaType;
    IntType :: JavaType;
    LongType :: JavaType;
    FloatType  :: JavaType;
    DoubleType :: JavaType;
    -- Type for arrays.
    ArrayType :: (n :: Nat) -> JavaType -> JavaType;
    -- Type for class instances.
    ClassType :: String -> JavaType;
  }

mkBooleanType :: JavaType;
mkBooleanType = BooleanType;

mkByteType :: JavaType;
mkByteType = ByteType;

mkCharType :: JavaType;
mkCharType = CharType;

mkShortType :: JavaType;
mkShortType = ShortType;

mkIntType :: JavaType;
mkIntType = IntType;

mkLongType :: JavaType;
mkLongType = LongType;

mkFloatType :: JavaType;
mkFloatType = FloatType;

mkDoubleType :: JavaType;
mkDoubleType = DoubleType;

mkArrayType :: (n :: Nat) -> JavaType -> JavaType;
mkArrayType n t = ArrayType n t;

mkClassType :: String -> JavaType;
mkClassType c = ClassType c;

mkValue :: (a :: sort 0) -> String -> a;

ecJoin :: Vec 12 (bitvector 32) -> bitvector 384;
ecJoin x = join 12 32 Bool x;

ecSplit :: bitvector 384 -> Vec 12 (bitvector 32);
ecSplit x = split 12 32 Bool x;

ecJoin768 :: Vec 24 (bitvector 32) -> bitvector 768;
ecJoin768 x = join 24 32 Bool x;

ecSplit768 :: bitvector 768 -> Vec 24 (bitvector 32);
ecSplit768 x = split 24 32 Bool x;

ecExtend :: bitvector 32 -> bitvector 384;
ecExtend x = bvUExt 352 32 x;

longExtend :: bitvector 32 -> bitvector 64;
longExtend x = bvUExt 32 32 x;
