/* Check that we generate multiple verification conditions. */
method LocalSpec.test1 {
    var args[0] :: int[12];
    localSpec 3 {
        modifies: valueOf(args[0]);
    };
    modifies: valueOf(args[0]);
    verifyUsing: abc;
};

/* Test that we can check intermediate values. */
method LocalSpec.test2 {
    var args[0] :: int[1];
    localSpec 3 {
        ensures valueOf(args[0]) := [1 : [32]];
    };
    modifies: valueOf(args[0]);
    /* Disabled until we implement evaluation of ensures clauses at the
       beginning of execution fragments. */
    //ensures valueOf(args[0]) := [2 : [32]];
    verifyUsing: abc;
};

/* Test that we can handle arbitrary iteration counts. */
method LocalSpec.test3 {
    var args[0] :: int[1];
    var args[1] :: int[1];
    /* The one back edge in this method is from "goto 4". */
    localSpec 19 {
        modifies: valueOf(args[0]);
    };
    modifies: valueOf(args[0]);
    verifyUsing: abc;
};

/* Test that we can check the body of a loop for an arbitrary
   iteration. */
method LocalSpec.test4 {
    var args[0] :: int[1];
    localSpec 13 {
        ensures valueOf(args[0]) := [join(valueOf(args[0])) - (1 : [32])];
    };
    modifies: valueOf(args[0]);
    verifyUsing: abc;
};

/* Test that we can analyze a method with a similar shape to the
   mod_div method. */
method LocalSpec.div_like {
    var args[0] :: int[8];
    localSpec 19 {
        ensures valueOf(args[0]) := split(0:[256]) : [8][32];
    };
    localSpec 30 {
        ensures valueOf(args[0]) := split(0:[256]) : [8][32];
    };
    ensures valueOf(args[0]) := split(0:[256]) : [8][32];
    verifyUsing: abc;
};
