// This SAWScript file contains definitions common to many proofs.  It
// also imports the SBV representations of functions from the
// Cryptol reference implementation.

let even(x:[384]) : Bit = (x & 1:[384]) == 0:[384];

// Define cosntants for P384 curve (taken from NIST and NSA documents).
let field_prime = <| 2^384 - 2^128 - 2^96 + 2^32 - 1 |> : [384];
let group_order = 0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973 : [384];

extern SBV ref_safe_product("../spec/sbv/generated/p384_safe_product.sbv") : ([384], [384]) -> [768];
extern SBV ref_field_mod("../spec/sbv/generated/p384_field_mod.sbv") : [768] -> [384];
extern SBV ref_incFieldPrime("../spec/sbv/generated/p384_incFieldPrime.sbv")
  : [384] -> { carry : [32]; rslt : [384] };
extern SBV ref_decFieldPrime("../spec/sbv/generated/p384_decFieldPrime.sbv")
  : [384] -> { carry : [32]; rslt : [384] };

extern SBV ref_group_add("../spec/sbv/generated/p384_group_add.sbv")    : ([384],[384]) -> [384];
extern SBV ref_mod_half("../spec/sbv/generated/p384_mod_half.sbv") : ([384], [384]) -> [384];
extern SBV ref_mod_add ("../spec/sbv/generated/p384_mod_add.sbv")
   : ([384], [384], [384]) -> [384];
extern SBV ref_mod_sub ("../spec/sbv/generated/p384_mod_sub.sbv")
   : ([384], [384], [384]) -> [384];

let ref_egcd(p:[384], a:[384], ra:[384], b:[384], rb:[384]) : [384] =
  if b == 0:[384] then
    ra
  else if even(b) then
    ref_egcd(p, a, ra, b       >>u 1:[384], ref_mod_half(p, rb))
  else if a <=u b then
    ref_egcd(p, a, ra, (b - a) >>u 1:[384], ref_mod_half(p, ref_mod_sub(p, rb, ra)))
  else 
    ref_egcd(p, b, rb, (a - b) >>u 1:[384], ref_mod_half(p, ref_mod_sub(p, ra, rb)));

let ref_mod_div(p:[384], x:[384], y:[384]) : [384] = ref_egcd(p, p, 0:[384], y, x);
pragma ref_mod_div : SBV "p384_mod_div"; // Declares that "ref_div" is "mod_div" in Cryptol.

extern SBV ref_is_field ("../spec/sbv/generated/p384_is_field_val.sbv") : [384] -> Bit;
extern SBV ref_field_add("../spec/sbv/generated/p384_field_add.sbv")    : ([384],[384]) -> [384];
extern SBV ref_field_sub("../spec/sbv/generated/p384_field_sub.sbv")    : ([384],[384]) -> [384];
extern SBV ref_field_neg("../spec/sbv/generated/p384_field_neg.sbv")    : [384] -> [384];
extern SBV ref_field_mul("../spec/sbv/generated/p384_field_mul.sbv")    : ([384],[384]) -> [384];
extern SBV ref_field_sq("../spec/sbv/generated/p384_field_sq.sbv")    : [384] -> [384];

extern SBV ref_ec_double("../spec/sbv/generated/p384_ec_double.sbv") :
  { x : [384]; y : [384]; z : [384] } -> { x : [384]; y : [384]; z : [384] };
extern SBV ref_ec_full_add("../spec/sbv/generated/p384_ec_full_add.sbv") 
  : ({ x: [384]; y: [384]; z: [384] }, { x:[384]; y:[384] }) -> { x:[384]; y:[384]; z:[384] };
extern SBV ref_ec_full_sub("../spec/sbv/generated/p384_ec_full_sub.sbv") 
  : ({ x: [384]; y: [384]; z: [384] }, { x:[384]; y:[384] }) -> { x:[384]; y:[384]; z:[384] };

extern SBV ref_ec_mul_init("../spec/sbv/generated/p384_ec_mul_init.sbv") :
  ([384], { x: [384]; y: [384] }) ->
  { h: [384]; r: { x: [384]; y: [384]; z: [384] } };

extern SBV ref_ec_mul_aux("../spec/sbv/generated/p384_ec_mul_aux.sbv") :
  ( { x: [384]; y: [384]; z: [384] }
  , { x: [384]; y:[384] }
  , [32]
  , [32]
  , [32]
  , [32]
  , [32]
  ) 
  -> { x:[384]; y:[384]; z:[384] };

extern SBV ref_ec_mul("../spec/sbv/generated/p384_ec_mul.sbv") :
  ([384], { x: [384]; y: [384] }) -> { x: [384]; y: [384]; z: [384] };

extern SBV ref_ec_twin_mul("../spec/sbv/generated/p384_ec_twin_mul.sbv") :
  ([384], { x: [384]; y: [384] }, [384], { x: [384]; y: [384] }) ->
  { x: [384]; y: [384]; z: [384] };
